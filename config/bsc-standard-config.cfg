teeout = yes
makeflags=-j 40

# Tester Information 
license_num     = 9999
test_sponsor    = Sponsor Name
tester          = Barcelona Supercomputing Center

######################################################
# SUT Section
######################################################

include: bsc-sut.inc

#######################################################################
# End of SUT section
######################################################################

######################################################################

# The header section of the config file.  Must appear
# before any instances of "section markers" (see below)
#
# ext = how the binaries you generated will be identified
# tune = specify "base" or "peak" or "all"
label         = %{model}
tune          = base
output_format = text
use_submit_for_speed = 1
strict_rundir_verify = 0

# Configuring MPI Wrapper and Compilers
preENV_OMPI_CC=clang
preENV_OMPI_CXX=clang++
preENV_MPICH_CC=clang
preENV_MPICH_CXX=clang++

OMPI_CC=clang
OMPI_CXX=clang++
MPICH_CC=clang
MPICH_CXX=clang++

default:
CC           = mpicc
CXX          = mpicxx
FC           = mpif90

CC_VERSION_OPTION  = --version
CXX_VERSION_OPTION = --version
FC_VERSION_OPTION  = --version


#Mode of execution
MPIRUN_OPTS = --bind-to none -q
#submit = mpirun ${MPIRUN_OPTS} -np $ranks taskset -c 0-23 ./$command
submit = mpirun ${MPIRUN_OPTS} -np $ranks $command

#######################################################################
# Optimization

# Note that SPEC baseline rules require that all uses of a given compiler 
# use the same flags in the same order. See the SPEChpc Run Rules
# for more details 
#      http://www.spec.org/hpc2021/Docs/runrules.html
#
# OPTIMIZE    = flags applicable to all compilers
# FOPTIMIZE   = flags appliable to the Fortran compiler
# COPTIMIZE   = flags appliable to the C compiler
# CXXOPTIMIZE = flags appliable to the C++ compiler
# 
# See your compiler manual for information on the flags available
# for your compiler

# Compiler flags applied to all models
default=base=default:
COPTIMIZE     = -Ofast -march=native -lm -Wno-unused-command-line-argument # use -mcpu=native for ARM
CXXOPTIMIZE   = -Ofast -march=native -std=c++14 -Wno-unused-command-line-argument#-g3 #for debug
FOPTIMIZE     = -Ofast -march=native -fno-stack-protector -Wno-unused-command-line-argument
FPORTABILITY  = -ffree-line-length-none
#LDOPTIONS = -lm #Use in case of tealeaf do not find the math library

# OpenMPI flags
%if %{model} eq 'mpi'
  pmodel=MPI
%endif

# OmpSs-2 flags
%if %{model} eq 'ompss'
  pmodel=MPI
  OPTIMIZE += -fompss-2
  PORTABILITY += -DSPEC_OMPSS -DBLOCK_SIZE=%{ENV_TASKS_BLOCK_SIZE}
%endif

#OpenMP-2 flags
%if %{model} eq 'omp-tasks'
  pmodel=MPI
  OPTIMIZE += -fopenmp
  PORTABILITY += -DSPEC_OPENMP_TASKS
%endif

# OpenACC flags
%if %{model} eq 'acc'
  pmodel=ACC
  OPTIMIZE += -fopenacc -foffload=-lm  
%endif

# OpenMP (CPU) flags
%if %{model} eq 'omp' 
  preENV_OMP_PROC_BIND=close
  pmodel=OMP
  OPTIMIZE += -fopenmp 
%endif

# OpenMP Targeting host flags
%if %{model} eq 'tgt' 
  preENV_OMP_PROC_BIND=true
  pmodel=TGT
  OPTIMIZE += -fopenmp 
%endif

# OpenMP Targeting Nvidia GPU flags
%if %{model} eq 'tgtnv'
  pmodel=TGT 
  OPTIMIZE += -fopenmp -fopenmp-targets=nvptx64-nvidia-cuda 
%endif

# No peak flags set, so make peak use the same flags as base 
default=peak=default:
basepeak=1
